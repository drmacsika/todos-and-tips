------------------------------> Tips for Git <------------------------------

Best Practices and Guidelines
<---------------------------------------->
0. Never directly push to the master branch.
1. Branch Frequently, Commit Often
- use smaller, short-lived branches.
- do not a large number of changes in a single branch.

2. Make Small, Single-Purpose Commits
- commit only small sections of code.
- Each commit should have a single purpose. For example, fixing a bug or adding a new feature.
- Commit all files that belong to a task in a single operation 
-- to keep the project consistent at all times.
- One best practice is to commit changes atomically in version control.
- All files in a commit are either committed together or not at all.
- No other user should see partial or incomplete changes.
- A check-in is similar to a database transaction described by its ACID properties:
-- Atomic.
-- Consistent.
-- Isolated.
-- Durable.

3. Write Short, Detailed Commit Messages
- When writing a commit message, start with a short summary of your change.
- Write your summary in present tense.
- Limit the subject line to 50 characters
- Always leave the second line blank. This separates your subject line from the message to ensures only the subject line displays.
- Think of a commit like a wrapper around a set of changes.
- Everything inside the wrapper accomplishes one purpose.
- If you are fixing two separate bugs, there should be two separate commits.
- A good commit message also references the issue ID(s) 
-— or even the requirement ID(s) — that the commit addressed (if applicable).
- Keep in mind that your team members will need to be able to read this message and understand exactly what you have done. Make sure that you provide enough detail to answer:
-- What changed from the last version?
-- How did it resolve the issue?
-- Why did you make the change?
-- Some bad examples are:

# Examples of bad commit messages
- Address workitem xxxyyy.
- Fixed a bug.
- Refactored X and Y. Added files.
- Who broke this code?????

# Examples of good commit messages
- Add search for username in group view.
- Fix dynamic field init method to show status.
- Small changes to text editor to enhance user experience.

4. Test Code and Require Reviews
- If you’re hesitant about your commit passing a build or test, don’t do it. 
- Bad commits make tracing bugs and resolving conflicts a nightmare.
- You should test your code often, and commit once.
- To help protect the quality of your codebase, your code will not only pass a build, but also be reviewed.
- Pick a code review tool that does not bottleneck development.
- When code is ready to be checked in, it should launch a code review.

5. Preserve History and Traceability
- When checking in a change, make sure all affected files and unit tests are included.
- This is especially important when working between branches.
- Providing related test cases and files with your commit ensures 
- that others can use your check-in without breaking their builds. 

<---------------------------------------->


To push from a to master on git
<---------------------------------------->
> git remote set-url origin https://username:token@github.com/username/repository.git
> git remote add origin https://username:token@github.com/username/repository.git
<---------------------------------------->


To get back stuff you accidentally deleted
To remove some stuff you tried that broke the repo
To recover after a bad merge
To go back to a time when things actually worked.
<---------------------------------------->
> git reflog
# you will see a list of every thing you've
# done in git, across all branches!
# each one has an index HEAD@{index}
# find the one before you broke everything
> git reset HEAD@{index}
# magic time machine
<---------------------------------------->


To make a small change after you have committed
Warning: You should never amend commits that have been pushed up 
to a public/shared branch! Only amend commits that only exist 
in your local copy or you're gonna have a bad time.
<---------------------------------------->
# make your change
# or add individual files
> git add . 
> git commit --amend --no-edit
# now your last commit contains that change!
# WARNING: never amend public commits
<---------------------------------------->


To change a commit message after you have committed
<---------------------------------------->
> git commit --amend 
<---------------------------------------->


Committed something to master that should
have been on a brand new branch!
<---------------------------------------->
# create a new branch from the current state of master
> git branch some-new-branch-name
# remove the last commit from the master branch
> git reset HEAD~ --hard
> git checkout some-new-branch-name
# your commit lives in this branch now :)
<---------------------------------------->


Committed something to the wrong branch!
<---------------------------------------->
# undo the last commit, but leave the changes available
> git reset HEAD~ --soft
> git stash
# move to the correct branch
> git checkout name-of-the-correct-branch
> git stash pop
> git add . # or add individual files
> git commit -m "your message here";
# now your changes are on the correct branch

Alternatively,
> git checkout name-of-the-correct-branch
# grab the last commit to master
> git cherry-pick master
# delete it from master
> git checkout master
> git reset HEAD~ --hard
<---------------------------------------->


To push to a remote branch without
specifying the name of the branch
HEAD points to the top of the current branch.
git can obtain the branch name from that. 
So it's the same as: git push origin CURRENT_BRANCH_NAME
<---------------------------------------->
> git push origin HEAD
# This is same as above but an extra step
# If you want to push into the specific remote branch
> git push origin HEAD:master
<---------------------------------------->


UNDERSTANDING GIT PUSH
When you run,
<---------------------------------------->
> git push origin X:Y
<---------------------------------------->
What happens is that you push something locally named X to the remote name Y. 
HEAD is not really a branch. It is an alias for whatever is currently checked out. 
A pointer to the commit that you currently have checked out
Also, if you are in an older place in the revision history? 
Like you did a checkout of a previous commit?
If you currently have master checked out,
<---------------------------------------->
# then,
> git push origin HEAD:master
# is equivalent to
> git push origin master:master
# and equivalent to
> git push origin master
# and if you've already done
> git push -u origin master
# Subsequent push can be:
> git push
# This is euivalent to
<---------------------------------------->


To undo a commit from like 5 commits ago!
Also, you don't have to track down and copy-paste 
the old file contents into the existing file
in order to undo changes!
If you committed a bug, you can undo the 
commit all in one go with revert
<---------------------------------------->
# find the commit you need to undo
> git log
# use the arrow keys to scroll up and down in history
# once you've found your commit, save the hash
> git revert [saved hash]
# git will create a new commit that undoes that commit
# follow prompts to edit the commit message
# or just save and commit
<---------------------------------------->



Added a file I didn't want in the repo
If all you did was stage the file and you haven't committed it yet, 
it's as simple as resetting that staged file:
<---------------------------------------->
# To remove a single file from the staging area, use
> git reset HEAD -- <file>
> git reset HEAD /assets/img/misty-and-pepper.jpg

# To remove a directory from the staging area, use
> git reset HEAD -- <directoryName>

# To remove every file that has been staged in the current directory
> git reset HEAD -- .

# resets all files in the project
> git reset

# If the files have already been committed
> git branch future-brunch
> git reset HEAD~ --hard
> git checkout future-brunch
<---------------------------------------->


To rename a branch
<---------------------------------------->
> git branch -m future-brunch feature-branch

# If you've already pushed it to remote
> git push origin --delete future-brunch
> git push origin feature-branch
<---------------------------------------->

Make a commmit
<---------------------------------------->
git commit -m "Initial commit"
<---------------------------------------->

View git branch
<---------------------------------------->
git branch
<---------------------------------------->

Make a new git branch
<---------------------------------------->
git checkout -b <new-branch>
git checkout -b <new-branch> <existing-branch>
<---------------------------------------->

Steps for a new local repository on gitlab
<---------------------------------------->
rm -rf .git //delete the git folder from an account
git config --global user.name "Macsika" //sets the global username
git config --global user.name //views the global username
git config --global user.email "drmacsika@gmail.com" //sets the global email
git config --global user.email //views the global email
git config --global --list //views all the global parameters
git init //initializes a new git repository
git checkout master //creates the master branch and selects the master branch to be worked on
git remote -v // checks the current remote version
git remote add origin https://gitlab.com/Macsika/belroyale // adds a new origin to the git repo project created on gitlab
git remote -v // checks the current remote version
git checkout -b NAME-OF-BRANCH(e.g master) //creates the master branch if it doesn't already exists
git checkout NAME-OF-BRANCH(e.g master) //selects the branch to be worked on
git status
git add .
git commit -m "COMMENT TO DESCRIBE THE INTENTION OF THE COMMIT"
git push origin master
<---------------------------------------->

Switch branches
<---------------------------------------->
git checkout <branchname>
<---------------------------------------->





Add from tested/developments to master
<---------------------------------------->
git checkout master
git pull               # to update the state to the latest remote master state
git merge tested/developments      # to bring changes to local master from your develop branch
git status (optional)
git add .
git commit -m "commit message"
git push origin master
<---------------------------------------->


view all git remote
<---------------------------------------->
git remote
<---------------------------------------->


------------------------------> Steps for GIT <------------------------------
------------------------------> Push and Pull Request <------------------------------
------------------------------> from a different repository <------------------------------

1. Fork the repository: This will create an instance of that entire repository in your account.
<---------------------------------------->
Do this by going to the project itself and click the fork button
<---------------------------------------->

2. Clone the repository: Once the repository is in your account, clone it to your machine to work with it locally.
<---------------------------------------->
git clone [HTTPS ADDRESS]
cd [NAME OF REPOSITORY]
<---------------------------------------->

3. Create a branch: Branch name should be short and it should reflect the work we’re doing. It’s good practice to create a new branch when working with repositories, whether it’s a small project or contributing to a group's work.
<---------------------------------------->
git checkout -b [Branch Name]
<---------------------------------------->

4. Make changes and commit them
<---------------------------------------->
git status
git add . or git add [FILENAME] [FILENAME] [...]
git commit -m "Commit message"
git remote
 -- if no origin (git remote add origin https://github.com/drmacsika/django-social-network.git)
 -- if not the required origin (git remote set-url origin https://github.com/drmacsika/django-social-network.git)
 -- remove old origin (git remote remove origin)
  -- show old origin (git remote show origin)
git pull origin [Branch Name]

----->>>>> Working with Vim
Here’s a list of commands for quitting Vim:
Esc – switch to command mode
:w – write out changes that were made
:q – exit Vim
:q! – exit Vim and discard any changes
:wq – saves the changes, and exits Vim
:x – save the changes made, and exits Vim
----->>>>>

commit and merge remote repository to local repository by entering message
git push origin [Branch Name]
<---------------------------------------->

5. Create pull request
<---------------------------------------->
- Go to your repository on GitHub and you’ll see a button “Compare & pull request” and click it
- Please provide necessary details on what you’ve done (You can reference issues using “#”). Now submit the pull request.
<---------------------------------------->

6. Sync your forked master branch - Before submitting any pull requests to the original repository you have to sync your repository to the original one.
<---------------------------------------->
git branch (It’ll list all branches and indicates the current or active branch in green.)
git checkout master
git remote add upstream [HTTPS] (Here, [HTTPS] is the URL that you have to copy from the owner’s repository. e.g https://github.com/drmacsika/django-social-network.git)
git fetch upstream (Fetch all of the changes from the original repository. Commits to the original repository will be stored in a local branch called upstream/master.)
git merge upstream/master (Merge the changes from the upstream/master into your local master branch. This will bring your fork’s master branch into sync with the upstream repository without losing your local changes.)
git push origin master (At this point your local branch is synced to the original repository’s master branch. If you want to update the GitHub repository, you need to push your changes.)
<---------------------------------------->


7. Delete the unnecessary branch
<---------------------------------------->
- git branch -d [Branch Name]
- git push origin --delete [Branch Name]
<---------------------------------------->



------------------------------> Steps for GIT <------------------------------
------------------------------> Push and Pull Request <------------------------------
------------------------------> from your repository <------------------------------

1. Clone the repository: Once the repository is in your account, clone it to your machine to work with it locally.
<---------------------------------------->
git clone [HTTPS ADDRESS]
cd [NAME OF REPOSITORY]
<---------------------------------------->

2. Create a branch: Branch name should be short and it should reflect the work we’re doing. It’s good practice to create a new branch when working with repositories, whether it’s a small project or contributing to a group's work.
<---------------------------------------->
git checkout -b [Branch Name]
<---------------------------------------->

3. Make changes and commit them
<---------------------------------------->
git status
git add . or git add [FILENAME] [FILENAME] [...]
git commit -m "Commit message"
git remote
 -- if no origin (git remote add origin https://github.com/drmacsika/django-social-network.git)
 -- if not the required origin (git remote set-url origin https://github.com/drmacsika/django-social-network.git)
 -- remove old origin (git remote remove origin)
 -- show old origin (git remote show origin)
git push origin [Branch Name]

git fetch remotename
git merge remotename/branchname
git fetch origin
git merge origin/master
<---------------------------------------->

4. Create pull request
<---------------------------------------->
- Go to your repository on GitHub and you’ll see a button “Compare & pull request” and click it
- Please provide necessary details on what you’ve done (You can reference issues using “#”). Now submit the pull request.
<---------------------------------------->

5. Alternatively, you can do git pull-request in the command line and complete the PULL Request to GitHub
<---------------------------------------->
git pull-request
<---------------------------------------->

6. Open a Pull request
7. Deleting a Branch after the PULL Request is Merged.


Steps provided by GitHub for new repositories
--------------------
git init
git add README.md
git commit -m "first commit"
git branch -M master
git remote add origin https://github.com/drmacsika/ryffable-web-platform.git
git push -u origin master
---------------------







############----- Github Default README.md -----##########

https://img.shields.io/github/last-commit/drmacsika/Cooking-Recipe-Guide-with-GraphQL-Django?style=plastic
# JWT-Authentication-with-ReactJS-Redux-and-Django-DRF

Foobar is a Python library for dealing with word pluralization.

## Features


## Installation


### Backend


Use the package manager [pip](https://pip.pypa.io/en/stable/) for installation.

```bash
- python -m venv venv
- source venv/bin/activate
- cd backend/src
- pip install -r requirements.txt
```

## Usage
- python manage.py makemigrations
- python manage.py migrate
- python manage.py runserver


### Frontend

Use the package manager [npm] or [yarn] for installation.

```bash
- cd Frontend
- npm install
```

## Usage
npm run dev or yarn start


## Contributing
Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

Please make sure to update tests as appropriate.

## License
[MIT](https://choosealicense.com/licenses/mit/)


## Additional Info
